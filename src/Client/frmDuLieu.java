/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Tu
 */
public class frmDuLieu extends javax.swing.JFrame {
    private InetAddress ip;
    private  int Port=1234;
    private String sqlconnect;
    private static Vector vctData;
    private static Vector vctHeader;
    
    /**
     * Creates new form frmDuLieu
     */
    public frmDuLieu() {
        this.sqlconnect="SQLCOnnect";
        vctData = new Vector();
        vctHeader = new Vector();
        vctHeader.add("MSSV");
        vctHeader.add("HoTen");
        vctHeader.add("DiemToan");
        vctHeader.add("DiemLy");
        vctHeader.add("DiemAV");
        vctHeader.add("DiemTrungBinh");
        initComponents();
    }


    frmDuLieu(DatagramPacket sendPacket,String send) {
        initComponents();
        ip =sendPacket.getAddress();
        Port=sendPacket.getPort();
        System.out.print(send);
        this.sqlconnect =send;
        vctData = new Vector();
        vctHeader = new Vector();
        vctHeader.add("MSSV");
        vctHeader.add("HoTen");
        vctHeader.add("DiemToan");
        vctHeader.add("DiemLy");
        vctHeader.add("DiemAV");
        vctHeader.add("DiemTrungBinh");
        this.txtCount.setEditable(false);
        this.btnUpdate.setEnabled(false);
        this.btnRemove.setEnabled(false);
        
        getData();
       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtMaSoSV = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDiemToan = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtDiemLy = new javax.swing.JTextField();
        txtDiemAV = new javax.swing.JTextField();
        btnLayDuLieu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCount = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Họ Tên", "Mã Số SV", "Điểm Toán", "Điểm Lý", "Điểm AV "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableData.setRowHeight(28);
        tableData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDataMouseClicked(evt);
            }
        });
        tableData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableDataKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableData);
        if (tableData.getColumnModel().getColumnCount() > 0) {
            tableData.getColumnModel().getColumn(0).setResizable(false);
            tableData.getColumnModel().getColumn(1).setResizable(false);
            tableData.getColumnModel().getColumn(2).setResizable(false);
            tableData.getColumnModel().getColumn(2).setPreferredWidth(18);
            tableData.getColumnModel().getColumn(3).setResizable(false);
            tableData.getColumnModel().getColumn(3).setPreferredWidth(18);
            tableData.getColumnModel().getColumn(4).setResizable(false);
            tableData.getColumnModel().getColumn(4).setPreferredWidth(18);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Họ tên:");

        txtHoTen.setText("Ngụy Hào ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setText("Mã Số SV:");

        txtMaSoSV.setText("1811035720");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setText("Điểm Toán:");

        txtDiemToan.setText("8.7");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setText("Điểm Lý");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setText("Điểm AV:");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtDiemLy.setText("5.6");

        txtDiemAV.setText("1.2");

        btnLayDuLieu.setText("Get Data");
        btnLayDuLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLayDuLieuActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setText("Dữ liệu Sinh Viên");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Tổng số Sinh Viên:");

        txtCount.setEditable(false);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtDiemToan, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(30, 30, 30)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtDiemLy, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(30, 30, 30)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtDiemAV, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtHoTen)
                                        .addComponent(txtMaSoSV))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLayDuLieu, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaSoSV, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiemToan, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiemLy, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiemAV, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLayDuLieu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String hoten = this.txtHoTen.getText();
        String maso=this.txtMaSoSV.getText();
        String toan=this.txtDiemToan.getText();
        String ly=this.txtDiemLy.getText();
        String av=this.txtDiemAV.getText();
        
        if (hoten.equals("")|| maso.equals("")||
            toan.equals("")||ly.equals("")||av.equals("")) {
            JOptionPane.showMessageDialog(null, "Không có đủ thông tin !!! ");
            return;      
        }
        
        if (maso.length()!=10) {
            JOptionPane.showMessageDialog(null, "Mã số sinh viên phải có 10 ký tự!!! ");
            return;    
        }
        try{
            float num1 = Float.parseFloat(toan);
            float num2 = Float.parseFloat(ly);
            float num3 = Float.parseFloat(av);
            if (!isScore(num1)|| !isScore(num2)||!isScore(num3)) {
                JOptionPane.showMessageDialog(null, "Điểm phải thuộc hệ số 10!!! ");
                return;
            }
        }catch(Exception ex){
             JOptionPane.showMessageDialog(null, "Vui Lòng nhập số để ghi điểm!!! ");
            return; 
        }
        
        boolean checkAthu = false;
            byte []sendData;
            DatagramSocket socket;
            try {
               
                socket = new DatagramSocket();
                    
                String strsend= "CreateData"+"#"+this.sqlconnect+"#"+hoten+"@"
                        +maso+"@"
                        +toan+"@"
                        +ly+"@"
                        +av;

                ip = InetAddress.getByName("localhost");
                
                sendData=strsend.getBytes();//Chuyen sang Bytes;
                
                DatagramPacket sendPacket= new DatagramPacket(sendData,sendData.length,ip,Port);
                socket.send(sendPacket);
                
                
                byte[] buffer = new byte[65507];
                DatagramPacket receivePacket = new DatagramPacket(buffer,buffer.length);
                socket.receive(receivePacket);
                /* if (Arrays.toString(receivePacket.getData()).isEmpty()||Arrays.toString(receivePacket.getData()).equals("Fail") ) {
                JOptionPane.showMessageDialog(null,"KẾT NỐI THẤT BẠI!");
                socket.close();
                return ;
                }*/
                JOptionPane.showMessageDialog(null,new String(receivePacket.getData(),0,receivePacket.getLength()) );
                socket.close();
                getData();
                cleanData();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Thực hiện tiến trình thất bại !!! ");
            }
        
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnLayDuLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLayDuLieuActionPerformed
        // TODO add your handling code here:
        getData();
       
        /* DefaultTableModel model = (DefaultTableModel) this.tableData.getModel();
        model.addColumn("Dtrb");*/
    }//GEN-LAST:event_btnLayDuLieuActionPerformed

    private void tableDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDataMouseClicked
        // TODO add your handling code here:
        
        int selectedRow =this.tableData.getSelectedRow();
        
        displayDetails(selectedRow);
        
        
    }//GEN-LAST:event_tableDataMouseClicked

    private void tableDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableDataKeyReleased
        // TODO add your handling code here:
        
        
        if (evt.getKeyCode()==KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN) {
            int selectedRow =this.tableData.getSelectedRow();
            displayDetails(selectedRow);
        }
        
        
    }//GEN-LAST:event_tableDataKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        String hoten = this.txtHoTen.getText();
        String maso=this.txtMaSoSV.getText();
        String toan=this.txtDiemToan.getText();
        String ly=this.txtDiemLy.getText();
        String av=this.txtDiemAV.getText();
        
        if (hoten.equals("")|| maso.equals("")||
            toan.equals("")||ly.equals("")||av.equals("")) {
            JOptionPane.showMessageDialog(null, "Không có đủ thông tin !!! ");
            return;    
        }
        if (maso.length()!=10) {
            JOptionPane.showMessageDialog(null, "Mã số sinh viên phải có 10 ký tự!!! ");
            return;    
        }
        try{
            float num1 = Float.parseFloat(toan);
            float num2 = Float.parseFloat(ly);
            float num3 = Float.parseFloat(av);
            if (!isScore(num1)|| !isScore(num2)||!isScore(num3)) {
                JOptionPane.showMessageDialog(null, "Điểm phải thuộc hệ số 10!!! ");
                return;
            }
            
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Vui Lòng nhập số để ghi điểm!!! ");
            return; 
        }
        
        
        boolean checkAthu = false;
            byte []sendData;
            DatagramSocket socket;
            try {
               
                socket = new DatagramSocket();
                    
                String strsend= "UpdateData"+"#"+this.sqlconnect+"#"+hoten+"@"
                        +maso+"@"
                        +toan+"@"
                        +ly+"@"
                        +av;

                ip = InetAddress.getByName("localhost");
                
                sendData=strsend.getBytes();//Chuyen sang Bytes;
                
                DatagramPacket sendPacket= new DatagramPacket(sendData,sendData.length,ip,Port);
                socket.send(sendPacket);
                
                
                byte[] buffer = new byte[65507];
                DatagramPacket receivePacket = new DatagramPacket(buffer,buffer.length);
                socket.receive(receivePacket);
                
                JOptionPane.showMessageDialog(null, new String(receivePacket.getData(),0,receivePacket.getLength()));
                socket.close();
                getData();
                cleanData();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Connecting to server Fail !!! ");
            }
        
        
           
        
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        
        String maso=this.txtMaSoSV.getText();
        
        if (maso.equals("")) {
            JOptionPane.showMessageDialog(null, "Không có thông tin!!! ");
            return;    
        }
        
        
        boolean checkAthu = false;
            byte []sendData;
            DatagramSocket socket;
            try {
               
                socket = new DatagramSocket();
                    
                String strsend= "RemoveData"+"#"+this.sqlconnect+"#"+maso;
                ip = InetAddress.getByName("localhost");
                
                sendData=strsend.getBytes();//Chuyen sang Bytes;
                
                DatagramPacket sendPacket= new DatagramPacket(sendData,sendData.length,ip,Port);
                socket.send(sendPacket);
                
                
                byte[] buffer = new byte[65507];
                DatagramPacket receivePacket = new DatagramPacket(buffer,buffer.length);
                socket.receive(receivePacket);
              
                socket.close();
                JOptionPane.showMessageDialog(null, new String(receivePacket.getData(),0,receivePacket.getLength()));
                getData();
                cleanData();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Connecting to server Fail !!! ");
            }
        
        
        
        
        
        
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLayDuLieu;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableData;
    private javax.swing.JTextField txtCount;
    private javax.swing.JTextField txtDiemAV;
    private javax.swing.JTextField txtDiemLy;
    private javax.swing.JTextField txtDiemToan;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaSoSV;
    // End of variables declaration//GEN-END:variables


    private void cleanData(){
        this.txtDiemAV.setText("");
        this.txtDiemLy.setText("");
        this.txtDiemToan.setText("");
        this.txtHoTen.setText("");
        this.txtMaSoSV.setText("");
        
        boolean isT= this.btnRemove.isEnabled();
        
        btnRemove.setEnabled(!isT);
        btnUpdate.setEnabled(!isT);
        
    }
    
    
    private void getData(){
        tableData.setModel(new DefaultTableModel(null,vctHeader));
        vctData.clear();
         byte []sendData;
            DatagramSocket socket;
            try {
                socket = new DatagramSocket();boolean ktFinish = false; 
                    
                String strsend= "GetAllData#"+this.sqlconnect;

                ip = InetAddress.getByName("localhost");
                sendData=strsend.getBytes();//Chuyen sang Bytes;
                DatagramPacket sendPacket= new DatagramPacket(sendData,sendData.length,ip,Port);
                socket.send(sendPacket);
                byte[] buffer = new byte[65507];
                /*while(ktFinish!=true) {
                DatagramPacket receivePacket = new DatagramPacket(buffer,buffer.length);
                socket.receive(receivePacket);
                String stReceive = new 	String(receivePacket.getData(),0,receivePacket.getLength());
                System.out.println("\nServer: " + stReceive); //UDP Client data to UDP Server 	System.out.print("\nCLient:"); stSend= in.readLine();
                sendData=stSend.getBytes();
                sendPacket = new DatagramPacket(sendData,sendData.length,ipServer,port);
                socket.send(sendPacket); //finish
                }*/
                

                
                
                DatagramPacket receivePacket = new DatagramPacket(buffer,buffer.length);
                socket.receive(receivePacket);
                if (Arrays.toString(receivePacket.getData()).isEmpty()||Arrays.toString(receivePacket.getData()).equals("Fail") ) {
                    JOptionPane.showMessageDialog(null,"KẾT NỐI THẤT BẠI!");
                    socket.close();
                    return ;
                }else{
                    String strNhan=new String(receivePacket.getData(),0,receivePacket.getLength());
                  
                    while(!strNhan.equals("close")){
                        System.out.println(strNhan);
                        addtoTable(strNhan);
                        socket.receive(receivePacket);
                        strNhan = new String(receivePacket.getData(),0,receivePacket.getLength());
                        
                    }
                    socket.close();
                    this.tableData.setModel(new DefaultTableModel(vctData,vctHeader));
                    this.txtCount.setText( String.valueOf(vctData.size()));
                }
                
                

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Connecting to server Fail !!! ");
            }
        
    }

    private void addtoTable(String strNhan) {
        Scanner sc = new Scanner(strNhan);
        sc.useDelimiter("///");
        Vector vector = new Vector();
        vector.add(sc.next());
        vector.add(sc.next());
        vector.add(sc.next());
        vector.add(sc.next());
        vector.add(sc.next());
        vector.add(sc.next());
        vctData.add(vector);
    }
    
    private void displayDetails(int selectedIndex){
        Vector vctRow = (Vector) vctData.get(selectedIndex);
        
        String mssv=(String) vctRow.get(0);
        String hoTen=(String) vctRow.get(1);
        String diemToan=(String) vctRow.get(2);
        String diemLy=(String) vctRow.get(3);
        String diemAV=(String) vctRow.get(4);
        String diemtrb = (String)vctRow.get(5);
    
        this.txtDiemAV.setText(diemAV);
        this.txtDiemLy.setText(diemLy);
        this.txtDiemToan.setText(diemToan);
        this.txtHoTen.setText(hoTen);
        this.txtMaSoSV.setText(mssv);
        
        this.btnUpdate.setEnabled(true);
        this.btnRemove.setEnabled(true);
    }

    private boolean isScore(float num1) {
        
        if (num1<0||num1>10) {
            return false;
        }
        return true;
    }

}
